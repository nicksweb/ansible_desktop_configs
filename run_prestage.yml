--- 

- name: Initial
  hosts: setup
  remote_user: pi

  vars: 
    - user: localadmin
    - password: '$6$k1QSGxocwWNLh$aKvkFr9hPP0a2Hx93v2.BiJUhYKv6eXiqz9r/5jMyzUtXbEplv70UImeOxR8hmymVoSTinh/9yahwix/psLic0' #

  tasks:

  - name: Run APT Update
    become: yes    
    become_user: root
    apt:
      update_cache: yes
    when: ansible_distribution == "Ubuntu" or ansible_distribution == 'Debian'

  - name: Update Root user's Password
    become: yes
    user:  
      name: pi
      update_password: always
      password: '$6$k1QSGxocwWNLh$aKvkFr9hPP0a2Hx93v2.BiJUhYKv6eXiqz9r/5jMyzUtXbEplv70UImeOxR8hmymVoSTinh/9yahwix/psLic0'
    when: 
    
  - name: install sudo
    become: yes
    package:
      name: 
        - sudo
        - htop
        - bwm-ng
        - vnstat
        - fail2ban

  - name: Configure Fail2Ban
    become: yes
    copy:  
      src: configs/jail.local
      dest: /etc/fail2ban/jail.local
  
  - name: Creating user localadmin with admin access
    become: yes
    user:
      name: '{{ user  }}' 
      password: '{{ password  }}'
      groups: sudo
      state: present
      shell: /bin/bash
      create_home: yes
      home: /home/localadmin
    when: ansible_distribution == "Ubuntu" or ansible_distribution == 'Debian'
    
  - name: Set authorized key for Ansible (localadmin).
    become: yes
    become_user: localadmin
    authorized_key:
      user: localadmin
      key: "{{ lookup('file', '/home/nicholaso/.ssh/ansible.pub') }}"

  - name: Set authorized key for corsair3900x
    become: yes
    become_user: localadmin 
    authorized_key:
      user: localadmin
      key: "{{ lookup('file', '/home/nicholaso/.ssh/nicholaso.corsair3900x.pub') }}"

  - name: Set SSHD_Config to disable root login. 
    become: yes
    lineinfile: 
      path: "/etc/ssh/sshd_config"
      regex: ^(# *)?PermitRootLogin
      line: PermitRootLogin No

  - name: Reboot the server
    become: yes
    shell: "sleep 5 && reboot"
    async: 1
    poll: 0

- name: Check system comes backonline 
  hosts: setup 
  remote_user: localadmin
  gather_facts: true 

  tasks: 

  - name: Wait for the reboot and reconnect 
    remote_user: localadmin
    wait_for:
      port: 22
      host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
      search_regex: OpenSSH
      delay: 10
      timeout: 60
    connection: local

  - name: Check the Uptime of the servers
    shell: "uptime"
    register: Uptime

  - debug: var=Uptime
